package Interface;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import javax.swing.JFrame;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

/**
 * The main class for the game's graphical interface and game loop.
 * This class sets up the main window (JFrame), handles rendering on a Canvas,
 * manages the game loop in a separate thread, and listens for keyboard input.
 */
public class Interface extends Canvas implements Runnable, KeyListener {

    /** A flag to control the execution of the game loop. */
    private boolean running = false;
    /** The main thread for the game loop. */
    private Thread thread;

    /** The width of the game window in pixels. */
    public static final int WIDTH = 1920;
    /** The height of the game window in pixels. */
    public static final int HEIGHT = 1080;

    // Game object initializations would go here.


    /**
     * Constructs the game's interface.
     * This sets up the main JFrame, configures its properties, adds this Canvas
     * component to it, and makes the window visible.
     */
    public Interface() {
        JFrame frame = new JFrame("Age Of Strings");
        this.addKeyListener(this);
        frame.setPreferredSize(new Dimension(WIDTH, HEIGHT));
        frame.setResizable(false);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(this);
        frame.pack();
        frame.setLocationRelativeTo(null); // Center the window on the screen
        frame.setVisible(true);
    }

    /**
     * Starts the game loop in a new thread.
     * This method is synchronized to prevent race conditions if called multiple times.
     */
    public synchronized void start() {
        if (running) return;
        running = true;
        thread = new Thread(this);
        thread.start();
    }

    /**
     * Stops the game loop and waits for its thread to terminate.
     * This method is synchronized to ensure a clean shutdown.
     */
    public synchronized void stop() {
        if (!running) return;
        running = false;
        try {
            thread.join(); // Wait for the thread to finish execution
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

  
    /**
     * Updates the game state. This method is called at a fixed rate (ticks per second)
     * and should contain all game logic, such as moving objects, checking for collisions, etc.
     */
    private void tick() {
        
    }

    /**
     * Renders the current game state to the screen.
     * It uses a BufferStrategy to implement double or triple buffering, which prevents
     * flickering and tearing by drawing to a hidden buffer before showing it on screen.
     */
    private void render() {
        BufferStrategy bs = this.getBufferStrategy();
        if (bs == null) {
            this.createBufferStrategy(3); // Create a triple buffer strategy
            return;
        }

        Graphics g = bs.getDrawGraphics();

        // --- Start Drawing ---
        g.setColor(Color.black);
        g.fillRect(0, 0, WIDTH, HEIGHT);
        // --- End Drawing ---

        g.dispose(); // Release system resources used by the graphics context
        bs.show();   // Show the contents of the buffer
    }

    /**
     * The main game loop, which runs in a separate thread.
     * It implements a fixed-tick loop to ensure that the game logic (tick)
     * updates at a consistent rate (60 times per second), independent of the
     * rendering frame rate.
     */
    @Override
    public void run() {
        requestFocus(); // Ensure the canvas has focus to receive key events

        long lastTime = System.nanoTime();
        double nsPerTick = 1_000_000_000.0 / 60.0; // Nanoseconds per tick for 60 ticks per second
        double delta = 0;

        while (running) {
            long now = System.nanoTime();
            delta += (now - lastTime) / nsPerTick;
            lastTime = now;

            while (delta >= 1) {
                tick();
                render();
                delta--;
            }
        }
        stop();
    }

    /**
     * The main entry point of the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        new Interface().start();
    }

    /**
     * Invoked when a key has been pressed.
     * @param e The KeyEvent generated by the key press.
     */
    @Override
    public void keyPressed(KeyEvent e) {
        /* if (e.getKeyCode() == KeyEvent.VK_W) player.up = true;
        if (e.getKeyCode() == KeyEvent.VK_S) player.down = true;
        if (e.getKeyCode() == KeyEvent.VK_A) player.left = true;
        if (e.getKeyCode() == KeyEvent.VK_D) player.right = true;
        if (e.getKeyCode() == KeyEvent.VK_UP) player.ydir = -1;
        if (e.getKeyCode() == KeyEvent.VK_DOWN) player.ydir = 1;
        if (e.getKeyCode() == KeyEvent.VK_LEFT) player.xdir = -1;
        if (e.getKeyCode() == KeyEvent.VK_RIGHT) player.xdir = 1;
        */

    }

    /**
     * Invoked when a key has been released.
     * @param e The KeyEvent generated by the key release.
     */
    @Override
    public void keyReleased(KeyEvent e) {
        /*
        if (e.getKeyCode() == KeyEvent.VK_W) player.up = false;
        if (e.getKeyCode() == KeyEvent.VK_S) player.down = false;
        if (e.getKeyCode() == KeyEvent.VK_A) player.left = false;
        if (e.getKeyCode() == KeyEvent.VK_D) player.right = false;
        if (e.getKeyCode() == KeyEvent.VK_UP) player.ydir = 0;
        if (e.getKeyCode() == KeyEvent.VK_DOWN) player.ydir = 0;
        if (e.getKeyCode() == KeyEvent.VK_LEFT) player.xdir = 0;
        if (e.getKeyCode() == KeyEvent.VK_RIGHT) player.xdir = 0;
        */

    }

    /**
     * Invoked when a key has been typed (pressed and released).
     * This method is typically not used for real-time game controls.
     * @param e The KeyEvent generated by the key type event.
     */
    @Override
    public void keyTyped(KeyEvent e) { }
}